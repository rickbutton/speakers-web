{
  "name": "hashtable",
  "description": "Hashtables in javascript. Use *anything* as a key, not just strings.",
  "keywords": [
    "hash",
    "hashtable",
    "hash table"
  ],
  "version": "0.0.4",
  "main": "./hash",
  "author": {
    "name": "Paul Harper",
    "email": "benekastah@gmail.com"
  },
  "contributors": [
    {
      "name": "Michael Ficarra"
    }
  ],
  "homepage": "https://github.com/benekastah/js-hashtable",
  "repository": {
    "type": "git",
    "url": "git@github.com:benekastah/js-hashtable.git"
  },
  "readme": "# JS HashTable\n\nAn easy way to use anything you need/want as a key to a hash.\n\nInstall:\n\n```\n$ npm install hashtable\n```\n\n## API\n\nThere are two classes for your hashtable pleasure:\n\n### QHash\n\n`QHash` stands for \"quick hash\". It's primary advantage is that it is light and fast. `QHash` will\nnot check to see if two keys are similar enough to be declared equal (for the most part). Therefore,\nif you pass in an object as a key, only that object will be able to retrieve the value. In this way,\nQHash offers more security than `HashTable`.\n\n```javascript\nvar bob, hash, apiKey;\nbob = new Person('Bob');\napiKey = new SomeLongUniqueThing();\n\napiKeys = new QHash();\napiKeys.set(bob, apiKey); // -> apiKey\n\napiKeys.get(bob); // -> apiKey\n\napiKeys.set(bob, null); // -> null\napiKeys.remove(bob); // -> null\napiKeys.get(bob); // -> undefined\n```\n\n### HashTable\n\n**Alias**: `Hash`\n\nThis hash will convert all keys passed in to a string. Objects with the same properties in different\norders will generate the same strings. Therefore, the object does not have to be exactly the same\nin order to retrieve the value, but instead must share all the same information. Inherited values will\nnot be accounted for.\n\nLike `QHash`, `HashTable` supports the `get`, `set` and `remove` functions, but we now have a little\nextra.\n\n```javascript\nvar routes, hkey = Hash.key;\n\nroutes = new Hash();\n// Define a route in your routes hash\nroutes.set(/^\\/user\\/all(\\.json)?$/, UsersController.displayAll);\n// Two ways to do the same thing\nroutes[hkey( /^\\/user\\/(\\d*)$/ )] = UsersController.displayById;\n```",
  "readmeFilename": "README.markdown",
  "_id": "hashtable@0.0.4",
  "dist": {
    "shasum": "2609ff23dbb497b79e0cb46aabf3ae6df0abd491"
  },
  "_from": "hashtable@",
  "_resolved": "https://registry.npmjs.org/hashtable/-/hashtable-0.0.4.tgz"
}
